/* soapClient.cpp
   Generated by gSOAP 2.2.3b from JigleService-1.0.h
   Copyright (C) 2001-2003 Genivia inc.
   All Rights Reserved.
*/
#include "stdafx.h"
#include "soapH.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.2.3b 2003-09-05 09:45:55 GMT")

SOAP_FMAC1 int SOAP_FMAC2 soap_call_api__version(struct soap *soap, const char *URL, const char *action, api__versionResponse *out)
{
	struct api__version soap_tmp_api__version;
	if (!action)
		action = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_api__version(soap, &soap_tmp_api__version);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_api__version(soap, &soap_tmp_api__version, "api:version", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_api__version(soap, &soap_tmp_api__version, "api:version", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_putattachments(soap)
	 || soap_end_send(soap))
		return soap->error;
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap->error;
	if (out)
		out->soap_get(soap, "api:versionResponse", "api:versionResponse");
	else
		soap_get_api__versionResponse(soap, out, "api:versionResponse", "api:versionResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			soap_recv_fault(soap);
		return soap->error;
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_getattachments(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC1 int SOAP_FMAC2 soap_call_api__searchFile(struct soap *soap, const char *URL, const char *action, LONG64 s, char *h, int o, api__searchFileResponse *out)
{
	struct api__searchFile soap_tmp_api__searchFile;
	if (!action)
		action = "";
	soap_tmp_api__searchFile.s=s;
	soap_tmp_api__searchFile.h=h;
	soap_tmp_api__searchFile.o=o;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_api__searchFile(soap, &soap_tmp_api__searchFile);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_api__searchFile(soap, &soap_tmp_api__searchFile, "api:searchFile", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_api__searchFile(soap, &soap_tmp_api__searchFile, "api:searchFile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_putattachments(soap)
	 || soap_end_send(soap))
		return soap->error;
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap->error;
	if (out)
		out->soap_get(soap, "api:searchFileResponse", "api:searchFileResponse");
	else
		soap_get_api__searchFileResponse(soap, out, "api:searchFileResponse", "api:searchFileResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			soap_recv_fault(soap);
		return soap->error;
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_getattachments(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC1 int SOAP_FMAC2 soap_call_api__search(struct soap *soap, const char *URL, const char *action, char *p, char *e, int a, LONG64 l, LONG64 u, int f, int m, int o, api__searchResponse *out)
{
	struct api__search soap_tmp_api__search;
	if (!action)
		action = "";
	soap_tmp_api__search.p=p;
	soap_tmp_api__search.e=e;
	soap_tmp_api__search.a=a;
	soap_tmp_api__search.l=l;
	soap_tmp_api__search.u=u;
	soap_tmp_api__search.f=f;
	soap_tmp_api__search.m=m;
	soap_tmp_api__search.o=o;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_api__search(soap, &soap_tmp_api__search);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_api__search(soap, &soap_tmp_api__search, "api:search", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_api__search(soap, &soap_tmp_api__search, "api:search", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_putattachments(soap)
	 || soap_end_send(soap))
		return soap->error;
	if (out)
		out->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap->error;
	if (out)
		out->soap_get(soap, "api:searchResponse", "api:searchResponse");
	else
		soap_get_api__searchResponse(soap, out, "api:searchResponse", "api:searchResponse");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			soap_recv_fault(soap);
		return soap->error;
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_getattachments(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

/* end of soapClient.cpp */
