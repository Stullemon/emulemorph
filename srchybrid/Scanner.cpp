#include "stdafx.h" //vs2005 //Fafner: vs2008: moved (precompiled header) - 080515

#line 3 "d:\\Data\\Src\\eMule_CVS\\srchybrid\\Scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 23
#define YY_END_OF_BUFFER 24
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[148] =
    {   0,
       20,   20,   20,   20,   24,   20,   22,   23,   20,   23,
        1,   22,   23,   21,   22,   23,   22,   23,   19,   20,
       22,   23,    6,   22,   23,   20,   22,   23,   20,   22,
       23,   20,   22,   23,   20,   22,   23,   20,   22,   23,
       23,   23,   13,   23,    8,   23,    6,   23,    7,   23,
       23,   14,   23,   18,   23,   21,   23,   23,   15,   23,
       20,    5,   20,   20,   20,    2,   20,   20,   13,   13,
       13,   13,   10,   11,    9,   14,   14,   14,   14,   18,
       15,   15,   15,   15,    3,   20,    4,   20,   20,   13,
       14,   16,   15,   20,   13,   14,   15,   20,   17,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   12,   20,   12
    } ;

static yyconst flex_int16_t yy_accept[173] =
    {   0,
        1,    2,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    6,    9,   11,   14,   17,   19,   23,
       26,   29,   32,   35,   38,   41,   42,   43,   45,   47,
       49,   51,   52,   54,   56,   58,   59,   61,   62,   64,
       65,   66,   68,   69,   70,   71,   72,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   80,   81,   82,   83,
       84,   84,   84,   85,   87,   89,   90,   90,   90,   91,
       91,   91,   92,   92,   93,   93,   94,   95,   95,   96,
       96,   97,   97,   98,   98,   99,  100,  101,  102,  103,
      104,  105,  106,  107,  108,  109,  109,  110,  110,  111,

      111,  112,  112,  113,  113,  114,  114,  115,  115,  116,
      116,  117,  117,  118,  118,  119,  119,  120,  120,  121,
      121,  122,  122,  123,  123,  124,  124,  125,  125,  126,
      126,  127,  127,  128,  128,  129,  129,  130,  130,  131,
      131,  132,  132,  133,  133,  134,  134,  135,  135,  136,
      136,  137,  137,  138,  138,  139,  139,  140,  140,  141,
      141,  142,  142,  143,  143,  144,  144,  145,  145,  147,
      148,  148
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    4,    1,    1,    1,    1,    1,    5,
        5,    1,    6,    1,    7,    8,    9,   10,   10,   11,
       10,   10,   10,   10,   10,   10,   10,   12,    1,   13,
       14,   15,    1,   16,   17,   18,   19,   20,   21,   19,
       22,   23,   23,   23,   22,   23,   22,   24,   25,   23,
       23,   26,   23,   27,   23,   23,   23,   23,   23,   23,
        1,    1,    1,    1,    1,    1,   28,   29,   28,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   36,
       36,   36,   36,   36,   34,   36,   36,   36,   36,   36,
       36,   36,    1,   40,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[41] =
    {   0,
        1,    1,    2,    2,    2,    1,    1,    1,    1,    3,
        3,    1,    2,    2,    2,    1,    4,    4,    4,    4,
        4,    5,    5,    5,    5,    5,    5,    4,    4,    4,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_int16_t yy_base[211] =
    {   0,
        0,   30,   49,   57,   65,   73,   88,    0,    5,   25,
      121,  129,  204,    0,    0, 1221, 1221, 1221,    0, 1221,
      117,  177,  173,  167,  160, 1221,    1,  149,    7, 1221,
      171,   16,  181,    0, 1221,   31,  213,    0,    0,  163,
      154,    0,  167,  243,   27,    0,  155, 1221, 1221, 1221,
     1221,  163,   35,    0, 1221,  157,    0,  166,  148,    0,
       39,  220, 1221,    0,    0,  138,  222,   41,  206,  230,
      185,  238,  250,  196,  240,  252,  160,  255,  257,  260,
      262,  267,  273,  277,  149,  282,  132,   98,  101,   95,
       47,   51,   37,  310,  348,   34,  287,  289,  291,  293,

      379,    0,  402,    0,  425,    0,  448,    0,  471,    0,
      494,    0,  517,    0,  540,    0,  563,    0,  586,    0,
      609,    0,  632,    0,  655,    0,  678,    0,  701,    0,
      724,    0,  747,    0,  770,    0,  793,    0,  816,    0,
      839,    0,  862,    0,  885,    0,  908,    0,  931,    0,
      954,    0,  977,    0, 1000,    0, 1023,    0, 1046,    0,
     1069,    0, 1092,    0,   29,   13,   27,   14,    0, 1221,
     1221, 1124, 1129, 1134, 1139, 1141, 1146, 1151, 1154, 1156,
     1158, 1160, 1162, 1164, 1166, 1168, 1170, 1172, 1174, 1176,
     1178, 1180, 1182, 1184, 1186, 1188, 1190, 1192, 1194, 1196,

     1198, 1200, 1202, 1204, 1206, 1208, 1210, 1212, 1214, 1216
    } ;

static yyconst flex_int16_t yy_def[211] =
    {   0,
      172,  172,  173,  173,  173,  173,  171,    7,  174,  174,
      173,  173,  171,  175,  175,  171,  171,  171,  175,  171,
      175,  175,  175,  175,  175,  171,  171,  171,  171,  171,
      171,  171,  171,  176,  171,  171,  171,  175,   21,  175,
      175,  175,  175,  171,   44,   28,  171,  171,  171,  171,
      171,   33,   52,   33,  171,  171,  176,  171,   58,   37,
      171,  171,  171,  175,  175,  175,  171,  171,  171,  171,
      171,   52,  171,  171,  171,  171,  175,  171,  171,  171,
       72,  171,  171,  171,  175,  171,  175,  175,  175,  175,
      175,  175,  175,  177,  177,  178,  175,  171,  175,  171,

      175,  179,  175,  180,  175,  181,  175,  182,  175,  183,
      175,  184,  175,  185,  175,  186,  175,  187,  175,  188,
      175,  189,  175,  190,  175,  191,  175,  192,  175,  193,
      175,  194,  175,  195,  175,  196,  175,  197,  175,  198,
      175,  199,  175,  200,  175,  201,  175,  202,  175,  203,
      175,  204,  175,  205,  175,  206,  175,  207,  175,  208,
      175,  209,  175,  210,  175,  171,  175,  171,  175,  171,
        0,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171
    } ;

static yyconst flex_int16_t yy_nxt[1262] =
    {   0,
      171,   15,   16,   17,   18,  171,   19,   26,   35,   26,
       44,   44,   18,   20,   18,   21,   22,   26,   30,   26,
       49,   50,  170,   23,   24,   52,   52,   26,   35,   26,
       25,   15,   16,   17,   18,  169,   19,   26,   30,   26,
       58,   58,   18,   20,   18,   21,   22,   47,   74,   74,
       69,   69,  168,   23,   24,   56,   27,   47,   28,   28,
       25,   29,   30,   31,   27,   56,   28,   28,  167,   29,
       30,   31,   32,   98,   33,   33,   94,   29,   30,   31,
       32,   93,   33,   33,   92,   29,   30,   31,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   30,   26,   26,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   26,   36,   91,
       37,   37,   90,   29,   30,   31,   36,   89,   37,   37,
       88,   29,   30,   31,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   45,   87,   46,   46,
       68,   68,   71,   71,   69,   69,   72,   72,   62,   47,
      171,   85,   52,   52,   77,   58,   58,   66,   62,   47,
       65,   48,   64,   70,   51,   48,   73,   48,   53,   43,
       54,   54,   42,   70,   72,   72,   73,   41,   55,   63,

       40,   56,   55,  171,   63,   74,   74,   84,  171,   55,
      171,   56,  171,   55,  171,   69,   69,   55,  171,   55,
       59,  171,   60,   60,   61,   75,   75,   78,   78,   76,
       76,   79,   79,   62,  171,   80,   80,  171,   48,   81,
       81,  171,   48,   62,   48,  171,   63,   72,   72,   76,
       76,   63,   44,   44,  171,   82,   82,  171,  171,   83,
       83,   76,   76,   67,   79,   79,   79,   79,  171,   81,
       81,   81,   81,   67,  171,   48,   83,   83,  171,   48,
      171,   48,   83,   83,  171,   63,   86,   86,  171,   48,
       63,   86,   86,   48,  171,   48,   99,   99,  100,  100,

       99,   99,  100,  100,  171,  171,   63,  171,  171,  171,
      171,   63,   96,   96,   96,  171,  171,  171,  171,  171,
      171,  171,   96,   96,   96,  171,  171,  171,  171,  171,
      101,  171,  102,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,   38,
       96,   96,   96,  171,  171,  171,  171,  171,  171,  171,
       96,   96,   96,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,   97,  103,  103,
      171,  171,  171,  171,  171,  103,  103,  103,  103,  103,

      171,  171,  171,  171,  171,  171,  103,  103,  103,  103,
      103,  105,  105,  171,  171,  171,  171,  171,  105,  105,
      105,  105,  105,  171,  171,  171,  171,  171,  171,  105,
      105,  105,  105,  105,  107,  107,  171,  171,  171,  171,
      171,  107,  107,  107,  107,  107,  171,  171,  171,  171,
      171,  171,  107,  107,  107,  107,  107,  109,  109,  171,
      171,  171,  171,  171,  109,  109,  109,  109,  109,  171,
      171,  171,  171,  171,  171,  109,  109,  109,  109,  109,
      111,  111,  171,  171,  171,  171,  171,  111,  111,  111,
      111,  111,  171,  171,  171,  171,  171,  171,  111,  111,

      111,  111,  111,  113,  113,  171,  171,  171,  171,  171,
      113,  113,  113,  113,  113,  171,  171,  171,  171,  171,
      171,  113,  113,  113,  113,  113,  115,  115,  171,  171,
      171,  171,  171,  115,  115,  115,  115,  115,  171,  171,
      171,  171,  171,  171,  115,  115,  115,  115,  115,  117,
      117,  171,  171,  171,  171,  171,  117,  117,  117,  117,
      117,  171,  171,  171,  171,  171,  171,  117,  117,  117,
      117,  117,  119,  119,  171,  171,  171,  171,  171,  119,
      119,  119,  119,  119,  171,  171,  171,  171,  171,  171,
      119,  119,  119,  119,  119,  121,  121,  171,  171,  171,

      171,  171,  121,  121,  121,  121,  121,  171,  171,  171,
      171,  171,  171,  121,  121,  121,  121,  121,  123,  123,
      171,  171,  171,  171,  171,  123,  123,  123,  123,  123,
      171,  171,  171,  171,  171,  171,  123,  123,  123,  123,
      123,  125,  125,  171,  171,  171,  171,  171,  125,  125,
      125,  125,  125,  171,  171,  171,  171,  171,  171,  125,
      125,  125,  125,  125,  127,  127,  171,  171,  171,  171,
      171,  127,  127,  127,  127,  127,  171,  171,  171,  171,
      171,  171,  127,  127,  127,  127,  127,  129,  129,  171,
      171,  171,  171,  171,  129,  129,  129,  129,  129,  171,

      171,  171,  171,  171,  171,  129,  129,  129,  129,  129,
      131,  131,  171,  171,  171,  171,  171,  131,  131,  131,
      131,  131,  171,  171,  171,  171,  171,  171,  131,  131,
      131,  131,  131,  133,  133,  171,  171,  171,  171,  171,
      133,  133,  133,  133,  133,  171,  171,  171,  171,  171,
      171,  133,  133,  133,  133,  133,  135,  135,  171,  171,
      171,  171,  171,  135,  135,  135,  135,  135,  171,  171,
      171,  171,  171,  171,  135,  135,  135,  135,  135,  137,
      137,  171,  171,  171,  171,  171,  137,  137,  137,  137,
      137,  171,  171,  171,  171,  171,  171,  137,  137,  137,

      137,  137,  139,  139,  171,  171,  171,  171,  171,  139,
      139,  139,  139,  139,  171,  171,  171,  171,  171,  171,
      139,  139,  139,  139,  139,  141,  141,  171,  171,  171,
      171,  171,  141,  141,  141,  141,  141,  171,  171,  171,
      171,  171,  171,  141,  141,  141,  141,  141,  143,  143,
      171,  171,  171,  171,  171,  143,  143,  143,  143,  143,
      171,  171,  171,  171,  171,  171,  143,  143,  143,  143,
      143,  145,  145,  171,  171,  171,  171,  171,  145,  145,
      145,  145,  145,  171,  171,  171,  171,  171,  171,  145,
      145,  145,  145,  145,  147,  147,  171,  171,  171,  171,

      171,  147,  147,  147,  147,  147,  171,  171,  171,  171,
      171,  171,  147,  147,  147,  147,  147,  149,  149,  171,
      171,  171,  171,  171,  149,  149,  149,  149,  149,  171,
      171,  171,  171,  171,  171,  149,  149,  149,  149,  149,
      151,  151,  171,  171,  171,  171,  171,  151,  151,  151,
      151,  151,  171,  171,  171,  171,  171,  171,  151,  151,
      151,  151,  151,  153,  153,  171,  171,  171,  171,  171,
      153,  153,  153,  153,  153,  171,  171,  171,  171,  171,
      171,  153,  153,  153,  153,  153,  155,  155,  171,  171,
      171,  171,  171,  155,  155,  155,  155,  155,  171,  171,

      171,  171,  171,  171,  155,  155,  155,  155,  155,  157,
      157,  171,  171,  171,  171,  171,  157,  157,  157,  157,
      157,  171,  171,  171,  171,  171,  171,  157,  157,  157,
      157,  157,  159,  159,  171,  171,  171,  171,  171,  159,
      159,  159,  159,  159,  171,  171,  171,  171,  171,  171,
      159,  159,  159,  159,  159,  161,  161,  171,  171,  171,
      171,  171,  161,  161,  161,  161,  161,  171,  171,  171,
      171,  171,  171,  161,  161,  161,  161,  161,  163,  163,
      171,  171,  171,  171,  171,  163,  163,  163,  163,  163,
      171,  171,  171,  171,  171,  171,  163,  163,  163,  163,

      163,  165,  165,  171,  171,  171,  171,  171,  165,  165,
      165,  165,  165,  171,  171,  171,  171,  171,  171,  165,
      165,  165,  165,  165,   14,   14,   14,   14,   14,   26,
       26,   26,   26,   26,   15,   15,   15,   15,   15,   38,
      171,   38,   38,   38,   57,   57,   95,   95,   95,   95,
       95,   96,   96,   96,   96,   96,  104,  104,  106,  106,
      108,  108,  110,  110,  112,  112,  114,  114,  116,  116,
      118,  118,  120,  120,  122,  122,  124,  124,  126,  126,
      128,  128,  130,  130,  132,  132,  134,  134,  136,  136,
      138,  138,  140,  140,  142,  142,  144,  144,  146,  146,

      148,  148,  150,  150,  152,  152,  154,  154,  156,  156,
      158,  158,  160,  160,  162,  162,  164,  164,  166,  166,
       13,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171
    } ;

static yyconst flex_int16_t yy_chk[1262] =
    {   0,
        0,    1,    1,    1,    1,    0,    1,    9,    9,    9,
       27,   27,    1,    1,    1,    1,    1,    9,    9,    9,
       29,   29,  168,    1,    1,   32,   32,   10,   10,   10,
        1,    2,    2,    2,    2,  167,    2,   10,   10,   10,
       36,   36,    2,    2,    2,    2,    2,   45,   61,   61,
       68,   68,  166,    2,    2,   53,    3,   45,    3,    3,
        2,    3,    3,    3,    4,   53,    4,    4,  165,    4,
        4,    4,    5,   96,    5,    5,   93,    5,    5,    5,
        6,   92,    6,    6,   91,    6,    6,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,   11,   90,
       11,   11,   89,   11,   11,   11,   12,   88,   12,   12,
       87,   12,   12,   12,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   28,   85,   28,   28,
       47,   47,   56,   56,   47,   47,   56,   56,   59,   28,
       52,   77,   52,   52,   66,   58,   58,   43,   59,   28,
       41,   28,   40,   52,   31,   28,   58,   28,   33,   25,
       33,   33,   24,   52,   71,   71,   58,   23,   33,   58,

       22,   33,   33,   13,   58,   74,   74,   74,    0,   33,
        0,   33,    0,   33,    0,   69,   69,   33,    0,   33,
       37,    0,   37,   37,   37,   62,   62,   67,   67,   62,
       62,   67,   67,   37,    0,   70,   70,    0,   69,   70,
       70,    0,   69,   37,   69,    0,   37,   72,   72,   75,
       75,   37,   44,   44,    0,   73,   73,    0,   72,   73,
       73,   76,   76,   44,   78,   78,   79,   79,   72,   80,
       80,   81,   81,   44,    0,   44,   82,   82,    0,   44,
        0,   44,   83,   83,    0,   76,   84,   84,    0,   79,
       76,   86,   86,   79,    0,   79,   97,   97,   98,   98,

       99,   99,  100,  100,    0,    0,   83,    0,    0,    0,
        0,   83,   94,   94,   94,    0,    0,    0,    0,    0,
        0,    0,   94,   94,   94,    0,    0,    0,    0,    0,
       99,    0,  100,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   94,
       95,   95,   95,    0,    0,    0,    0,    0,    0,    0,
       95,   95,   95,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   95,  101,  101,
        0,    0,    0,    0,    0,  101,  101,  101,  101,  101,

        0,    0,    0,    0,    0,    0,  101,  101,  101,  101,
      101,  103,  103,    0,    0,    0,    0,    0,  103,  103,
      103,  103,  103,    0,    0,    0,    0,    0,    0,  103,
      103,  103,  103,  103,  105,  105,    0,    0,    0,    0,
        0,  105,  105,  105,  105,  105,    0,    0,    0,    0,
        0,    0,  105,  105,  105,  105,  105,  107,  107,    0,
        0,    0,    0,    0,  107,  107,  107,  107,  107,    0,
        0,    0,    0,    0,    0,  107,  107,  107,  107,  107,
      109,  109,    0,    0,    0,    0,    0,  109,  109,  109,
      109,  109,    0,    0,    0,    0,    0,    0,  109,  109,

      109,  109,  109,  111,  111,    0,    0,    0,    0,    0,
      111,  111,  111,  111,  111,    0,    0,    0,    0,    0,
        0,  111,  111,  111,  111,  111,  113,  113,    0,    0,
        0,    0,    0,  113,  113,  113,  113,  113,    0,    0,
        0,    0,    0,    0,  113,  113,  113,  113,  113,  115,
      115,    0,    0,    0,    0,    0,  115,  115,  115,  115,
      115,    0,    0,    0,    0,    0,    0,  115,  115,  115,
      115,  115,  117,  117,    0,    0,    0,    0,    0,  117,
      117,  117,  117,  117,    0,    0,    0,    0,    0,    0,
      117,  117,  117,  117,  117,  119,  119,    0,    0,    0,

        0,    0,  119,  119,  119,  119,  119,    0,    0,    0,
        0,    0,    0,  119,  119,  119,  119,  119,  121,  121,
        0,    0,    0,    0,    0,  121,  121,  121,  121,  121,
        0,    0,    0,    0,    0,    0,  121,  121,  121,  121,
      121,  123,  123,    0,    0,    0,    0,    0,  123,  123,
      123,  123,  123,    0,    0,    0,    0,    0,    0,  123,
      123,  123,  123,  123,  125,  125,    0,    0,    0,    0,
        0,  125,  125,  125,  125,  125,    0,    0,    0,    0,
        0,    0,  125,  125,  125,  125,  125,  127,  127,    0,
        0,    0,    0,    0,  127,  127,  127,  127,  127,    0,

        0,    0,    0,    0,    0,  127,  127,  127,  127,  127,
      129,  129,    0,    0,    0,    0,    0,  129,  129,  129,
      129,  129,    0,    0,    0,    0,    0,    0,  129,  129,
      129,  129,  129,  131,  131,    0,    0,    0,    0,    0,
      131,  131,  131,  131,  131,    0,    0,    0,    0,    0,
        0,  131,  131,  131,  131,  131,  133,  133,    0,    0,
        0,    0,    0,  133,  133,  133,  133,  133,    0,    0,
        0,    0,    0,    0,  133,  133,  133,  133,  133,  135,
      135,    0,    0,    0,    0,    0,  135,  135,  135,  135,
      135,    0,    0,    0,    0,    0,    0,  135,  135,  135,

      135,  135,  137,  137,    0,    0,    0,    0,    0,  137,
      137,  137,  137,  137,    0,    0,    0,    0,    0,    0,
      137,  137,  137,  137,  137,  139,  139,    0,    0,    0,
        0,    0,  139,  139,  139,  139,  139,    0,    0,    0,
        0,    0,    0,  139,  139,  139,  139,  139,  141,  141,
        0,    0,    0,    0,    0,  141,  141,  141,  141,  141,
        0,    0,    0,    0,    0,    0,  141,  141,  141,  141,
      141,  143,  143,    0,    0,    0,    0,    0,  143,  143,
      143,  143,  143,    0,    0,    0,    0,    0,    0,  143,
      143,  143,  143,  143,  145,  145,    0,    0,    0,    0,

        0,  145,  145,  145,  145,  145,    0,    0,    0,    0,
        0,    0,  145,  145,  145,  145,  145,  147,  147,    0,
        0,    0,    0,    0,  147,  147,  147,  147,  147,    0,
        0,    0,    0,    0,    0,  147,  147,  147,  147,  147,
      149,  149,    0,    0,    0,    0,    0,  149,  149,  149,
      149,  149,    0,    0,    0,    0,    0,    0,  149,  149,
      149,  149,  149,  151,  151,    0,    0,    0,    0,    0,
      151,  151,  151,  151,  151,    0,    0,    0,    0,    0,
        0,  151,  151,  151,  151,  151,  153,  153,    0,    0,
        0,    0,    0,  153,  153,  153,  153,  153,    0,    0,

        0,    0,    0,    0,  153,  153,  153,  153,  153,  155,
      155,    0,    0,    0,    0,    0,  155,  155,  155,  155,
      155,    0,    0,    0,    0,    0,    0,  155,  155,  155,
      155,  155,  157,  157,    0,    0,    0,    0,    0,  157,
      157,  157,  157,  157,    0,    0,    0,    0,    0,    0,
      157,  157,  157,  157,  157,  159,  159,    0,    0,    0,
        0,    0,  159,  159,  159,  159,  159,    0,    0,    0,
        0,    0,    0,  159,  159,  159,  159,  159,  161,  161,
        0,    0,    0,    0,    0,  161,  161,  161,  161,  161,
        0,    0,    0,    0,    0,    0,  161,  161,  161,  161,

      161,  163,  163,    0,    0,    0,    0,    0,  163,  163,
      163,  163,  163,    0,    0,    0,    0,    0,    0,  163,
      163,  163,  163,  163,  172,  172,  172,  172,  172,  173,
      173,  173,  173,  173,  174,  174,  174,  174,  174,  175,
        0,  175,  175,  175,  176,  176,  177,  177,  177,  177,
      177,  178,  178,  178,  178,  178,  179,  179,  180,  180,
      181,  181,  182,  182,  183,  183,  184,  184,  185,  185,
      186,  186,  187,  187,  188,  188,  189,  189,  190,  190,
      191,  191,  192,  192,  193,  193,  194,  194,  195,  195,
      196,  196,  197,  197,  198,  198,  199,  199,  200,  200,

      201,  201,  202,  202,  203,  203,  204,  204,  205,  205,
      206,  206,  207,  207,  208,  208,  209,  209,  210,  210,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#include "stdafx.h"
#include "resource.h"
#include <io.h>
#include "OtherFunctions.h"
#include "SearchExpr.h"
#include "scanner.h"
#include "parser.hpp"
#include "ED2KLink.h"
#include "StringConversion.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#define	ECHO					TRACE
#define	YY_INPUT				ReadLexBuff
#define	YY_FATAL_ERROR			FatalLexError

extern int yyerror(LPCTSTR errstr);
extern int yyerrorf(LPCTSTR errstr, ...);

static void ReadLexBuff(char* pcBuff, int& riResult, size_t uMaxSize);
static void FatalLexError(yyconst char msg[]);
int opt_strnicmp(const char* pszString, const char* pszMatch, size_t nMinMatch);

static CStringA s_strInputBuff;
static LPCSTR s_pszLexBuff;
static bool s_bKeepQuotedStrings;

#pragma warning(disable:4127) // conditional expression is constant
#pragma warning(disable:4242) // conversion from <type1> to <type1>, possible loss of data
#pragma warning(disable:4244) // conversion from <type1> to <type2>, possible loss of data
#pragma warning(disable:4505) // unreferenced local function has been removed
/* flex 2.5.35: There is a bug in the 'noyywrap' option which creates a wrong 'yywrap' macro.
 *              Need to use an explicit 'yywrap' function to get the same functionality.
 */
/*%option noyywrap*/
/* we are using the REJECT macro */
/* do not create an interactive scanner */
/* do not create calls to 'isatty' to determine if the input file is 'interactive' */
/* generate an 8-bit scanner */
/* suppress inclusion of the non-ANSI header file "unistd.h" */
#define YY_NO_UNISTD_H 1
/* Reject some special characters for 'keywords'
 *
 * SPACE	obvious
 * ( and )	obvious
 * "		quoted string
 * <		comparison operator
 * >		comparison operator
 * =		comparison operator
 *
 * The '@' character does not need to be rejected because:
 *	- it is allowed only at the start of a meta-id (e.g. @size)
 *  - all terminals which are allowed to preceede a meta-id and which are allowed
 *    to follow a meta-id are already rejected (e.g. (a)@size>1). This way we can
 *    still allow keywords which include a '@' character (e.g. fr@nk)
 */

#define INITIAL 0
#define NUMBER 1
#define SIZE 2
#define TYPE 3
#define STRING 4
#define LENGTH 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 172 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 171 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{ /* Skip blanks. */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ return TOK_OR; }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return TOK_AND; }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return TOK_NOT; }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
					if (opt_strnicmp(yytext+1, "size", 3) == 0) {
						BEGIN(SIZE);
						return TOK_SIZE;
					}
					else if (opt_strnicmp(yytext+1, "type", 3) == 0) {
						BEGIN(TYPE);
						return TOK_TYPE; 
					}
					else if (opt_strnicmp(yytext+1, "ext", 3) == 0) {
						BEGIN(STRING);
						return TOK_EXT;
					}
					else if (opt_strnicmp(yytext+1, "availability", 3) == 0 || 
						     opt_strnicmp(yytext+1, "sources", 3) == 0) {
						BEGIN(NUMBER);
						return TOK_SOURCES; 
					}
					else if (opt_strnicmp(yytext+1, "complete", 3) == 0) {
						BEGIN(NUMBER);
						return TOK_COMPLETE; 
					}
					else if (opt_strnicmp(yytext+1, "bitrate", 3) == 0) {
						BEGIN(NUMBER);
						return TOK_BITRATE; 
					}
					else if (opt_strnicmp(yytext+1, "length", 3) == 0) {
						BEGIN(LENGTH);
						return TOK_LENGTH; 
					}
					else if (opt_strnicmp(yytext+1, "codec", 3) == 0) {
						BEGIN(STRING);
						return TOK_CODEC; 
					}
					else if (opt_strnicmp(yytext+1, "rating", 3) == 0) {
						BEGIN(NUMBER);
						return TOK_RATING; 
					}
					else if (opt_strnicmp(yytext+1, "title", 3) == 0) {
						BEGIN(STRING);
						return TOK_TITLE; 
					}
					else if (opt_strnicmp(yytext+1, "album", 3) == 0) {
						BEGIN(STRING);
						return TOK_ALBUM; 
					}
					else if (opt_strnicmp(yytext+1, "artist", 3) == 0) {
						BEGIN(STRING);
						return TOK_ARTIST; 
					}
					yyerrorf(GetResString(IDS_SEARCH_UNKATTR), OptUtf8ToStr(yytext));
					yyterminate();
					/*NOT REACHED*/
				}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return TOK_OPR_EQ; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return TOK_OPR_GT; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return TOK_OPR_LT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return TOK_OPR_GE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return TOK_OPR_LE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return TOK_OPR_NE; }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{
	//
	// NOTE: There is no need to explicitly handle the
	//
	//	"ed2k::"[a-fA-F0-9]{32}
	//
	// pattern with a separate token. It would be even wrong! "ed2k::<hash>" is to be handled
	// as any other string term. It even can get combined with other search terms and operators
	// within one search tree.
					CString strError;
					try
					{
						CED2KLink* pLink = CED2KLink::CreateLinkFromUrl(CA2T(yytext));
						if (pLink && pLink->GetKind() == CED2KLink::kFile)
						{
							CED2KFileLink* pFileLink = pLink->GetFileLink();
							if (pFileLink)
							{
								yylval.pstr = new CStringA;
								yylval.pstr->Format("ed2k::%s", md4strA(pFileLink->GetHashKey()));
								delete pLink;
								return TOK_ED2K_LINK;
							}
						}
						delete pLink;
					}
					catch(CString strEd2kLinkError)
					{
						strError = strEd2kLinkError;
					}
					if (strError.IsEmpty())
						strError = GetResString(IDS_ERR_BADED2KLINK);
					yyerror(strError);
					yyterminate();
					/*NOT REACHED*/
				}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
					BEGIN(INITIAL);
					char* endptr = NULL;
					double dbl = strtod(yytext, &endptr);
					if (endptr) {
						if (*endptr == 'k')
							dbl *= 1000;
						else if (*endptr == 'm')
							dbl *= 1000*1000;
						else if (*endptr == 'g')
							dbl *= 1000*1000*1000;
					}
					yylval.num = (uint64)(dbl + 0.5);
					return TOK_NUMBER;
				}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
					BEGIN(INITIAL);
					char* endptr = NULL;
					double dbl = strtod(yytext, &endptr);
					if (endptr) {
						if (*endptr == 'B' || *endptr == 'b')
							;
						else if (*endptr == 'K' || *endptr == 'k')
							dbl *= 1024;
						else if (*endptr == 'M' || *endptr == 'm')
							dbl *= 1024*1024;
						else if (*endptr == 'G' || *endptr == 'g')
							dbl *= 1024*1024*1024;
						else
							dbl *= 1024*1024;
					}
					else {
						dbl *= 1024*1024;
					}
					yylval.num = (uint64)(dbl + 0.5);
					return TOK_NUMBER;
				}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
					BEGIN(INITIAL);
					char* endptr = NULL;
					double dbl = strtod(yytext, &endptr);
					if (endptr) {
						if (*endptr == 's')
							;
						else if (*endptr == 'm')
							dbl *= 60;
						else if (*endptr == 'h')
							dbl *= 60*60;
					}
					yylval.num = (uint64)(dbl + 0.5);
					return TOK_NUMBER;
				}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
					BEGIN(INITIAL);
					UINT m, s;
					if (sscanf(yytext, "%u:%u", &m, &s) != 2) {
						yyerrorf(GetResString(IDS_SEARCH_ATTRERR), _T("@length"));
						yyterminate();
						/*NOT REACHED*/
					}
					yylval.num = s + m*60;
					return TOK_NUMBER;
				}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
					BEGIN(INITIAL);
					UINT h, m, s;
					if (sscanf(yytext, "%u:%u:%u", &h, &m, &s) != 3) {
						yyerrorf(GetResString(IDS_SEARCH_ATTRERR), _T("@length"));
						yyterminate();
						/*NOT REACHED*/
					}
					yylval.num = s + m*60 + h*60*60;
					return TOK_NUMBER;
				}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
					BEGIN(INITIAL);
					if (opt_strnicmp(yytext, "audio", 3) == 0)
					{
						yylval.pstr = new CStringA(ED2KFTSTR_AUDIO);
						return TOK_TYPEVAL;
					}
					else if (opt_strnicmp(yytext, "video", 3) == 0)
					{
						yylval.pstr = new CStringA(ED2KFTSTR_VIDEO);
						return TOK_TYPEVAL;
					}
					else if (opt_strnicmp(yytext, "image", 3) == 0 || _stricmp(yytext, "img") == 0)
					{
						yylval.pstr = new CStringA(ED2KFTSTR_IMAGE);
						return TOK_TYPEVAL;
					}
					else if (opt_strnicmp(yytext, "document", 3) == 0)
					{
						yylval.pstr = new CStringA(ED2KFTSTR_DOCUMENT);
						return TOK_TYPEVAL;
					}
					else if (opt_strnicmp(yytext, "program", 3) == 0)
					{
						yylval.pstr = new CStringA(ED2KFTSTR_PROGRAM);
						return TOK_TYPEVAL;
					}
					else if (opt_strnicmp(yytext, "archive", 3) == 0)
					{
						yylval.pstr = new CStringA(ED2KFTSTR_ARCHIVE);
						return TOK_TYPEVAL;
					}
					else if (_stricmp(yytext, "iso") == 0 || _stricmp(yytext, "cd") == 0)
					{
						yylval.pstr = new CStringA(ED2KFTSTR_CDIMAGE);
						return TOK_TYPEVAL;
					}
					yyerrorf(GetResString(IDS_SEARCH_ATTRERR), _T("@type"));
					yyterminate();
					/*NOT REACHED*/
				}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return TOK_NOT; }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
{
					if (YYSTATE == INITIAL)
					{
					    /* Strings prefixed with '-' are to be handled with a different rule, reject it and let
					     * the scanner find the next best rule. */
					    if (yytext[0] == '-') {
						    REJECT;
						    /*NOT REACHED*/
					    }
    
					    /* Strings prefixed with '@' are treated as 'invalid' meta-tag id. Otherwise they would be
					     * silently used as string terms -> a typo would not be noticed by the user */
					    if (yytext[0] == '@') {
							yyerrorf(GetResString(IDS_SEARCH_UNKATTR), OptUtf8ToStr(yytext));
						    yyterminate();
						    /*NOT REACHED*/
					    }
					}
					else if (YYSTATE == STRING)
						BEGIN(INITIAL);
					yylval.pstr = new CStringA(yytext);
					return TOK_STRING;
                }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
					int l = 128;
					char* psz = (char*)malloc(l);
					if (psz == NULL) {
						yyerror(_T("Less memory for string"));
						yyterminate();
						/*NOT REACHED*/
					}
					int i = 0;
					int c;
					while ((c = yyinput()) != '\"')
					{
						if (c == EOF || c == '\n'){
							unput(c);
							yyerror(GetResString(IDS_SEARCH_UNTERMSTRING));
							yyterminate();
							/*NOT REACHED*/
							break;
						}
						if (c == '\\'){		/*Escape sequence*/
							switch (c = yyinput())
							{
							case '\n':
								continue;
							case 't':		/*Tab*/
								c = '\t';
								break;
							case 'n':		/*Linefeed*/
								c = '\n';
								break;
							case 'f':		/*Formfeed*/
								c = '\f';
								break;
							case 'r':		/*Carriage return*/
								c = '\r';
								break;
							case '\\':		/*Backslash*/
								c = '\\';
								break;
							case '"':		/*Double quotation mark*/
								c = '\"';
								break;
							case '\'':		/*Single quotation mark*/
								c = '\'';
								break;
							case '?':		/*Question mark*/
								c = '\?';
								break;
							case 'v':		/*Vertical Tab*/
								c = '\v';
								break;
							case 'a':		/*Alert*/
								c = '\a';
								break;
							case 'b':		/*Backspace*/
								c = '\b';
								break;
							case 'x':		/*Hexadecimal number*/
								{
									int n, octv;
									for (n = 1, octv = 0; n <= 3; n++) {
										if ((c = yyinput()) >= '0' && c <= '9')
											c -= '0';
										else if (c >= 'a' && c <= 'f')
											c = (c - 'a') + 10;
										else if (c >= 'A' && c <= 'F')
											c = (c - 'A') + 10;
										else
											break;
										octv = octv * 16 + c;
									}
									unput(c);
									if (n == 1)
										c = 'x';
									else
										c = octv;
								}
								break;
							}
						}
#ifndef _UNICODE
						else{
							if ((unsigned char)c >= 0x80 && IsDBCSLeadByte(yytext[0])){
								psz[i++] = (unsigned char)c;
								if (i >= l){
									char* pszNew = (char*)realloc(psz, l += 128);
									if (pszNew == NULL){
										free(psz);
										yyerror(_T("Less memory for string"));
										yyterminate();
										/*NOT REACHED*/
										break;
									}
									psz = pszNew;
								}
								c = yyinput();
							}
						}
#endif

						psz[i++] = (unsigned char)c;
						if (i >= l){
							char* pszNew = (char*)realloc(psz, l += 128);
							if (pszNew == NULL){
								free(psz);
								yyerror(_T("Less memory for string"));
								yyterminate();
								/*NOT REACHED*/
								break;
							}
							psz = pszNew;
						}
					}
					psz[i] = '\0';
					
					if (s_bKeepQuotedStrings && YYSTATE != STRING) {
						CStringA quoted;
						quoted = '\"';
						quoted += psz;
						quoted += '\"';
						yylval.pstr = new CStringA(quoted);
					}
					else
						yylval.pstr = new CStringA(psz);
					free(psz);

					BEGIN(INITIAL);

					// Do not return empty strings, and also do not return quoted empty strings
					if (!yylval.pstr->IsEmpty() && *yylval.pstr != "\"\"")
						return TOK_STRING;

					delete yylval.pstr;
				}
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(NUMBER):
case YY_STATE_EOF(SIZE):
case YY_STATE_EOF(TYPE):
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(LENGTH):
{ return TOK_EOF; }
	YY_BREAK
case 23:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 172 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 172 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 171);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

/* flex 2.5.35: There is a bug in the 'noyywrap' option which creates a wrong 'yywrap' macro.
 *              Need to use an explicit 'yywrap' function to get the same functionality.
 */
int yywrap()
{
	return 1;
}

#pragma warning(default:4127) // conditional expression is constant
#pragma warning(default:4244) // conversion from 'type1' to 'type2', possible loss of data

static void ReadLexBuff(char* pcBuff, int& riResult, size_t uMaxSize)
{
	ASSERT( s_pszLexBuff != NULL );
	if (s_pszLexBuff == NULL)
		YY_FATAL_ERROR("Input in flex scanner failed");

	ASSERT( sizeof(YY_CHAR) == sizeof(char) );
	size_t uCharsInBuff = strlen(s_pszLexBuff);
	size_t uCharsRead = min(uMaxSize, uCharsInBuff);
	riResult = uCharsRead;
	memcpy(pcBuff, s_pszLexBuff, uCharsRead);
	s_pszLexBuff += uCharsRead;
}

static void FatalLexError(yyconst char msg[])
{
#ifdef _CONSOLE
	printf("Fatal error in flex scanner: %s\n", msg);
#else
	AfxMessageBox(CString(_T("Fatal error in flex scanner: ")) + CA2CT(msg), MB_ICONSTOP);
#endif
}

void LexInit(LPCTSTR pszInput, bool bKeepQuotedStrings)
{
	s_strInputBuff = StrToUtf8(pszInput);
	s_pszLexBuff = (LPCSTR)s_strInputBuff;
	s_bKeepQuotedStrings = bKeepQuotedStrings;
}

void LexFree()
{
	yylex_destroy();
	yytext = NULL;
	yyleng = 0;
	yy_hold_char = '\0';
	yy_n_chars = 0;
	yy_did_buffer_switch_on_eof = 0;
	yylineno = 1;
	s_strInputBuff.Empty();
	s_pszLexBuff = NULL;
}

int opt_strnicmp(const char* pszString, const char* pszMatch, size_t nMinMatch)
{
	size_t nStringLen = strlen(pszString);
	if (nStringLen < nMinMatch)
		return -1;
	size_t nMatchLen = strlen(pszMatch);
	ASSERT( nMatchLen >= nMinMatch );
	if (nStringLen > nMatchLen)
		return 1;
	return _strnicmp(pszString, pszMatch, nStringLen);
}

